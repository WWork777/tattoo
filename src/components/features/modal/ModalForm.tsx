"use client";
import { useEffect, useState } from "react";
import styles from "./ModalForm.module.scss";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ –æ—à–∏–±–æ–∫
interface FormData {
  name: string;
  phone: string;
  vkLink: string;
}

interface FormErrors {
  name?: string;
  phone?: string;
  vkLink?: string;
}

const ModalForm = ({
  isOpen,
  onClose,
}: {
  isOpen: boolean;
  onClose: () => void;
}) => {
  const [formData, setFormData] = useState<FormData>({
    name: "",
    phone: "",
    vkLink: "",
  });
  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Escape
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener("keydown", handleKeyDown);
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª body –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
      document.body.style.overflow = "hidden";
    }

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "unset";
    };
  }, [isOpen, onClose]);

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (!isOpen) {
      setFormData({ name: "", phone: "", vkLink: "" });
      setErrors({});
      setIsSuccess(false);
    }
  }, [isOpen]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    }

    if (!formData.phone.trim()) {
      newErrors.phone = "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
    } else if (
      !/^(\+7|8)[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/.test(
        formData.phone
      )
    ) {
      newErrors.phone = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
    }

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
    if (formData.vkLink && formData.vkLink.trim().length < 3) {
      newErrors.vkLink =
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (errors[name as keyof FormErrors]) {
      setErrors((prev) => ({
        ...prev,
        [name]: undefined,
      }));
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
  const sendToTelegram = async (data: FormData) => {
    const botToken = "8281662695:AAEg-faLY8Giv_T_VBH7Y7zyGxQIUQQDciQ";
    const chatId = "-4914999892";

    if (!botToken || !chatId) {
      throw new Error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram –±–æ—Ç–∞");
    }

    const message = `
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é

üë§ –ò–º—è: ${data.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö: ${data.vkLink || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
    `;

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL (—É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª)
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
        }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${errorData.description}`);
    }

    return response.json();
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setIsSuccess(false);

    try {
      await sendToTelegram(formData);
      setIsSuccess(true);
      setFormData({ name: "", phone: "", vkLink: "" });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
      setTimeout(() => {
        onClose();
      }, 3000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      alert(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modal} onClick={onClose}>
      <div
        className={styles.modal__content}
        onClick={(e) => e.stopPropagation()}
      >
        <button
          className={styles.modal__close}
          onClick={onClose}
          aria-label="–ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É"
        >
          √ó
        </button>

        <div className={styles.form__content}>
          <h2>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</h2>

          {isSuccess && (
            <div className={styles.success_message}>
              ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ
              –≤—Ä–µ–º—è.
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className={styles.input_group}>
              <input
                type="text"
                name="name"
                placeholder="–¢–≤–æ—ë –∏–º—è"
                value={formData.name}
                onChange={handleChange}
                className={errors.name ? styles.error : ""}
                required
              />
              {errors.name && (
                <span className={styles.error_text}>{errors.name}</span>
              )}
            </div>

            <div className={styles.input_group}>
              <input
                type="tel"
                name="phone"
                placeholder="89991234567"
                value={formData.phone}
                onChange={handleChange}
                className={errors.phone ? styles.error : ""}
                required
              />
              {errors.phone && (
                <span className={styles.error_text}>{errors.phone}</span>
              )}
            </div>

            <div className={styles.input_group}>
              <input
                type="text"
                name="vkLink"
                placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                value={formData.vkLink}
                onChange={handleChange}
                className={errors.vkLink ? styles.error : ""}
              />
              {errors.vkLink && (
                <span className={styles.error_text}>{errors.vkLink}</span>
              )}
            </div>

            <button type="submit" disabled={isSubmitting}>
              <p>{isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}</p>
            </button>
          </form>

          <span>
            –ù–∞–∂–∏–º–∞—è ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, –í—ã¬†—Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          </span>
        </div>
      </div>
    </div>
  );
};

export default ModalForm;
